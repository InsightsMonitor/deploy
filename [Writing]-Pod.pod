Formatting Codes

In ordinary paragraphs and in some command paragraphs, various formatting codes (a.k.a. "interior sequences") can be used:

I<text> -- italic text
Used for emphasis ("be I<careful!>") and parameters ("redo I<LABEL>")

B<text> -- bold text
Used for switches ("perl's B<-n> switch"), programs ("some systems provide a B<chfn> for that"), emphasis ("be B<careful!>"), and so on ("and that feature is known as B<autovivification>").

C<code> -- code text
Renders code in a typewriter font, or gives some other indication that this represents program text ("C<gmtime($^T)>") or some other form of computerese ("C<drwxr-xr-x>").

L<name> -- a hyperlink
There are various syntaxes, listed below. In the syntaxes given, text, name, and section cannot contain the characters '/' and '|'; and any '<' or '>' should be matched.

L<name>
Link to a Perl manual page (e.g., L<Net::Ping>). Note that name should not contain spaces. This syntax is also occasionally used for references to Unix man pages, as in L<crontab(5)>.

L<name/"sec"> or L<name/sec>
Link to a section in other manual page. E.g., L<perlsyn/"For Loops">

L</"sec"> or L</sec>
Link to a section in this manual page. E.g., L</"Object Methods">

A section is started by the named heading or item. For example, L<perlvar/$.> or L<perlvar/"$."> both link to the section started by "=item $." in perlvar. And L<perlsyn/For Loops> or L<perlsyn/"For Loops"> both link to the section started by "=head2 For Loops" in perlsyn.

To control what text is used for display, you use "L<text|...>", as in:

L<text|name>
Link this text to that manual page. E.g., L<Perl Error Messages|perldiag>

L<text|name/"sec"> or L<text|name/sec>
Link this text to that section in that manual page. E.g., L<postfix "if"|perlsyn/"Statement Modifiers">

L<text|/"sec"> or L<text|/sec> or L<text|"sec">
Link this text to that section in this manual page. E.g., L<the various attributes|/"Member Data">

Or you can link to a web page:

L<scheme:...>
L<text|scheme:...>

Links to an absolute URL. For example, L<http://www.perl.org/> or L<The Perl Home Page|http://www.perl.org/>.

E<escape> -- a character escape
Very similar to HTML/XML &foo; "entity references":

E<lt> -- a literal < (less than)
E<gt> -- a literal > (greater than)
E<verbar> -- a literal | (vertical bar)
E<sol> -- a literal / (solidus)
The above four are optional except in other formatting codes, notably L<...>, and when preceded by a capital letter.

E<htmlname>
Some non-numeric HTML entity name, such as E<eacute>, meaning the same thing as &eacute; in HTML -- i.e., a lowercase e with an acute (/-shaped) accent.

E<number>
The ASCII/Latin-1/Unicode character with that number. A leading "0x" means that number is hex, as in E<0x201E>. A leading "0" means that number is octal, as in E<075>. Otherwise number is interpreted as being in decimal, as in E<181>.

Note that older Pod formatters might not recognize octal or hex numeric escapes, and that many formatters cannot reliably render characters above 255. (Some formatters may even have to use compromised renderings of Latin-1 characters, like rendering E<eacute> as just a plain "e".)

F<filename> -- used for filenames
Typically displayed in italics. Example: "F<.cshrc>"

S<text> -- text contains non-breaking spaces
This means that the words in text should not be broken across lines. Example: S<$x ? $y : $z>.

X<topic name> -- an index entry
This is ignored by most formatters, but some may use it for building indexes. It always renders as empty-string. Example: X<absolutizing relative URLs>

Z<> -- a null (zero-effect) formatting code
This is rarely used. It's one way to get around using an E<...> code sometimes. For example, instead of "NE<lt>3" (for "N<3") you could write "NZ<><3" (the "Z<>" breaks up the "N" and the "<" so they can't be considered the part of a (fictitious) "N<...>" code).

Most of the time, you will need only a single set of angle brackets to delimit the beginning and end of formatting codes. However, sometimes you will want to put a real right angle bracket (a greater-than sign, '>') inside of a formatting code. This is particularly common when using a formatting code to provide a different font-type for a snippet of code. As with all things in Perl, there is more than one way to do it. One way is to simply escape the closing bracket using an E code:

    C<$a E<lt>=E<gt> $b>
This will produce: "$a <=> $b"

A more readable, and perhaps more "plain" way is to use an alternate set of delimiters that doesn't require a single ">" to be escaped. Doubled angle brackets ("<<" and ">>") may be used if and only if there is whitespace right after the opening delimiter and whitespace right before the closing delimiter! For example, the following will do the trick:
    C<< $a <=> $b >>
In fact, you can use as many repeated angle-brackets as you like so long as you have the same number of them in the opening and closing delimiters, and make sure that whitespace immediately follows the last '<' of the opening delimiter, and immediately precedes the first '>' of the closing delimiter. (The whitespace is ignored.) So the following will also work:
    C<<< $a <=> $b >>>
    C<<<<  $a <=> $b     >>>>
And they all mean exactly the same as this:

    C<$a E<lt>=E<gt> $b>
The multiple-bracket form does not affect the interpretation of the contents of the formatting code, only how it must end. That means that the examples above are also exactly the same as this:

    C<< $a E<lt>=E<gt> $b >>
As a further example, this means that if you wanted to put these bits of code in C (code) style:

    open(X, ">>thing.dat") || die $!
    $foo->bar();
you could do it like so:

    C<<< open(X, ">>thing.dat") || die $! >>>
    C<< $foo->bar(); >>
which is presumably easier to read than the old way:

    C<open(X, "E<gt>E<gt>thing.dat") || die $!>
    C<$foo-E<gt>bar();>
This is currently supported by pod2text (Pod::Text), pod2man (Pod::Man), and any other pod2xxx or Pod::Xxxx translators that use Pod::Parser 1.093 or later, or Pod::Tree 1.02 or late